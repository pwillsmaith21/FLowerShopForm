<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADzliIA9JcjE/OWIl/zliGX85Yhl/OWIl/0lyMS85ciAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAwGUWAMBlGAbAZRUzv2QVUdF1GVbylSGq85Yh9vOWIf/zliH/85Yh9vKVIarRdRlWv2QVUMBm
        FjO9ahkGv2cWAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMFmFADBZhQQwGUVfsBlFd7BZhX62n4b+/OWIf7zliH/85Yh//OWIf/zliH/85Yh/tp+
        G/vBZhX5wGUV3cBlFX2/ZRUPv2UVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADAYhMAwFcLAcBkFG3AZRX2wGUV/8RpFv/pjR//85Yh//OWIf/zliH/85Yh//OW
        If/zliH/6Ywf/8RpFv/AZRX/wGUV9sBlFWy7ZRABv2UUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADxliEA6pgmAPeZIArpjB41z3MZzcdsF//BZhb/xGkW/+yPH//zliH/85Yh//OW
        If/zliH/85Yh//OWIf/sjx//xGkW/8JmFv/JbRf/0XUZzumNHzn3mSML8ZYdAPOWIQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOWIQDzlyEp85YhofOWIejwkyD97ZEg/9x/HP/IbBf/44ce//OW
        If/zliH/85Yh//OWIf/zliH/85Yh/+OHHv/IbRf/3oEc/+6RH//wkyD+85Yh6vOWIaX0lyAr85YhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADzlyAA85cgGvOWIbDzliH/85Yh//OWIf/zliH/8pUh/9+C
        HP/ZfBv/8pUh//OWIf/zliH/85Yh//OWIf/ylSH/2n0b/+GEHP/ylSH/85Yh//OWIf/zliH/85Yh//OW
        IbDzliEa85YhAAAAAAAAAAAAAAAAAAAAAAAAAAAA9pUkAPCXIADzliJb85Yh+POWIf/zliH/85Yh//OW
        If/zliH/8ZQh/9+DHP/rjR7/9pYf//WWH//1lh//9Zcf/+uOHv/hhBz/8pUh//OWIf/zliH/85Yh//OW
        If/zliH/85Yh9/OWIVjylSMA9ZgeAAAAAAAAAAAAAAAAAAAAAAD0lyIA9pkkA/OWIYHzliH/85Yh//OW
        If/zliH/85Yh//OWIf/0liH/7pEf/8yLN/+Olnz/Ypem/2KXpv+Olnz/zYs2/+6RH//0liH/85Yh//OW
        If/zliH/85Yh//OWIf/zliH/9JchfP2gJgL1mCIAAAAAAAAAAAAAAAAAAAAAAPGWIADblhUB8pYhd/OW
        If/zliH/85Yh//OWIf/zliH/85Yh//OWIf+5llb/NpbM/wWX+v8Al///AJf//wWX+v83lsv/upZV//SW
        IP/zliH/85Yh//OWIf/zliH/85Yh//OWIf/zliFy/7IhAPGUIQAAAAAAAAAAAAAAAAAAAAAAwmcVALRd
        EBDUeBmo7pEg//OWIf/zliH/85Yh//OWIf/0liD/2Jc6/zeXzP8Amf//Dqz//yLH//8ix///Dqz//wCZ
        //85mMv/2ZY5//SWIP/zliH/85Yh//OWIf/zliH/7ZAg/9J2Gqa0WRIPwmYWAAAAAAAAAAAAAAAAAAAA
        AADAZRUAwGUUXcFnFfTYfBr/8JMg//OWIf/zliH/85Yh//WWH/+Ol33/Bpf5/w+u//8z4P//POz//zzs
        //8z4P//D63//waX+f+Pl3z/9ZYf//OWIf/zliH/85Yh/++SIP/Wehr/wWYV9MBlFVzAZRUAAAAAAAAA
        AAAAAAAAAAAAAMBlFQDAZRWYwGUV/8JnFv/Pcxj/3oIc/+iLHv/tkSD/85Qe/2CXpv8Al///Isf//zvs
        //876///O+v//zvs//8ix///AJf//2GXpv/ykx7/7I8g/+eKHv/dgBz/znIY/8FmFf/AZRX/wGUVl8Bl
        FQAAAAAAAAAAAAAAAAAAAAAAwGUVAMBlFZjAZRX/wWYV/81yGP/dgBz/54oe/+yQIP/ykx7/X5en/wCX
        //8iyP//O+z//zvr//876///O+z//yLH//8Al///YJen//OTHv/tkCD/6Isf/96BHP/Pcxj/wmYV/8Bl
        Ff/AZRWYwGUVAAAAAAAAAAAAAAAAAAAAAADAZRUAwGYUX8FmFfXWehr/75Ig//OWIf/zliH/85Yh//WW
        H/+Nl37/Bpf5/w6t//8z4P//POz//zzs//8z4P//Dq3//waX+f+Pl33/9ZYf//OWIf/zliH/85Yh//CT
        IP/Yexr/wWYV9cBlFF7AZRUAAAAAAAAAAAAAAAAAAAAAAMFmFQC1XRAQ0nYZqO2QIP/zliH/85Yh//OW
        If/zliH/9JYg/9eWOv82l83/AJn//w6t//8iyP//Isj//w+u//8Amf//N5fM/9iXOv/0liD/85Yh//OW
        If/zliH/85Yh/+2RIP/TdxmptFsQEMFmFQAAAAAAAAAAAAAAAAAAAAAA7ZQhAP/eIQDyliF085Yh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh/7iWV/80ls3/BZf7/wCX//8Al///BZf6/zWWzf+5llb/9JYh//OW
        If/zliH/85Yh//OWIf/zliH/85Yh//KVIXa4eCEA75QhAAAAAAAAAAAAAAAAAAAAAADzliEA85YhAvOW
        IX/zliH/85Yh//OWIf/zliH/85Yh//OWIf/0liH/7pEf/8yLOP+Mln//YJen/2CXp/+Mln7/zIs4/+6R
        H//0liH/85Yh//OWIf/zliH/85Yh//OWIf/zliH/85Yhf/OSIQLzlSEAAAAAAAAAAAAAAAAAAAAAAPaS
        IwDxmyAA85YhWvOWIfjzliH/85Yh//OWIf/zliH/85Yh//KVIf/hhBz/640e//WWH//1lh//9ZYf//aX
        H//rjh7/34Mc//GUIf/zliH/85Yh//OWIf/zliH/85Yh//OWIffzlyJa8ZkdAPaUJgAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPOXIADzlyAa85YhsfOWIf/zliH/85Yh//OWIf/ylSH/4YQc/9p9G//ylSH/85Yh//OW
        If/zliH/85Yh//KVIf/ZfBv/34Md//KVIf/zliH/85Yh//OWIf/zliH/85YhsPOYIBrzmCAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOWIQDyliAs85Yhp/OWIerwkyD+7pEf/96BHP/IbRf/44ce//OW
        If/zliH/85Yh//OWIf/zliH/85Yh/+OHHv/HbRf/3IAc/+2RIP/wkyD+85Yh6POWIaL0lyEq85YhAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9ZYfAPWPGAD4myIM6o0gOtF1Gc7Jbhf/wmYW/8Rp
        Fv/sjx//85Yh//OWIf/zliH/85Yh//OWIf/zliH/7I8f/8RpFv/BZhb/x2wX/890Gc3pjB429pogCumJ
        JgDxlCEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL1lFgCyZRoBv2UVbcBl
        FfbAZRX/xGkW/+mMHv/zliH/85Yh//OWIf/zliH/85Yh//OWIf/pjB//xGkW/8BlFf/AZRX2wGQUbMBf
        DAHAYxMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL9k
        FAC/ZBQQwGUVfsBlFd7BZhX72n4b/POWIf7zliH/85Yh//OWIf/zliH/8pUh/tp+G/zBZhX7wGUV3cBl
        FX3BYxUPwWMVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAMBlFgC+aBkGwGUVNL9kFVLRdRhX8pUhq/OWIfbzliH/85Yh//OWIfbylSGr0XUaV79k
        FVLAZRUzvWkZBr9mFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPOXIQD0mSIT85YhYPOWIZfzliGX85YhYPSY
        IhPzlyEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////////////gf//+AAf//AAD//gAAf/wAAD/4AAAf8AAAD/AA
        AA/gAAAH4AAAD+AAAAfgAAAH4AAAB+AAAAfgAAAH4AAAB/AAAA/gAAAH8AAAD/AAAA/4AAAf/AAAP/4A
        AH//AAD//4AB///4H/////////////////8=
</value>
  </data>
</root>